name: Deploy

on:
  push:
    tags: ['v*']

jobs:
  build-libraries:
    name: Build platform libraries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            artifact-name: libs-Linux-native
          - os: macos-15
            artifact-name: libs-macOS-native
          - os: ubuntu-24.04
            cross-compile-windows: true
            artifact-name: libs-windows-cross

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build libraries
        uses: ./.github/actions/build-btrack
        with:
          cross-compile-windows: ${{ matrix.cross-compile-windows || 'false' }}

  deploy:
    needs: build-libraries
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Download all library artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: libs-*
          path: _libs
          merge-multiple: true

      - name: Organize libraries
        run: |
          mkdir -p btrack/libs
          find _libs/ -type f \( -name '*.dll' -o -name '*.DLL' -o -name '*.so' -o -name '*.dylib' \) -exec cp {} btrack/libs/ \;
          echo "Libraries collected:"
          ls -la btrack/libs/

          # Verify we have libraries for all platforms
          if [ ! -f btrack/libs/*.so ]; then echo "Missing Linux libraries"; exit 1; fi
          if [ ! -f btrack/libs/*.dylib ]; then echo "Missing macOS libraries"; exit 1; fi
          if ! ls btrack/libs/*.dll btrack/libs/*.DLL 2>/dev/null; then echo "Missing Windows libraries"; exit 1; fi

      - name: Install build dependencies
        run: python -m pip install --upgrade pip build

      - name: Build distributions
        run: python -m build

      - name: Deploy to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TESTPYPI_SECRET }}
          repository-url: https://test.pypi.org/legacy/

      - name: Test TestPyPI installation
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "Testing version: $VERSION"

          # Install from TestPyPI
          python -m pip install --index-url https://test.pypi.org/simple/ \
                                --extra-index-url https://pypi.org/simple \
                                "btrack==$VERSION"

          # Test basic functionality
          python -c "
          import btrack
          print(f'✓ Imported btrack {btrack.__version__}')
          tracker = btrack.BayesianTracker()
          print('✓ Created BayesianTracker instance')
          print('✓ TestPyPI deployment verified')
          "

      # - name: Deploy to PyPI
      #   if: github.repository == 'quantumjot/btrack'
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   # Uses trusted publishing - no password needed
