name: Deploy

on:
  push:
    tags: ['v*']

jobs:
  build-libraries:
    name: Build platform libraries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            artifact-name: libs-Linux-native
          - os: macos-15
            artifact-name: libs-macOS-native
          - os: ubuntu-24.04
            cross-compile-windows: true
            artifact-name: libs-windows-cross

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build libraries
        uses: ./.github/actions/build-btrack
        with:
          cross-compile-windows: ${{ matrix.cross-compile-windows || 'false' }}

  deploy:
    needs: build-libraries
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Download all library artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: libs-*
          path: _libs
          merge-multiple: true

      - name: Extract and verify version
        id: version
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "Tag: $GITHUB_REF_NAME"
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Organize libraries
        run: |
          mkdir -p btrack/libs
          find _libs/ -type f \( -iname '*.dll' -o -name '*.so' -o -name '*.dylib' \) -exec cp {} btrack/libs/ \;
          echo "Libraries collected:"
          ls -la btrack/libs/

          # Verify we have libraries for all platforms
          linux_libs=$(find btrack/libs/ -name '*.so' | wc -l)
          macos_libs=$(find btrack/libs/ -name '*.dylib' | wc -l)
          windows_libs=$(find btrack/libs/ -iname '*.dll' | wc -l)

          if [ "$linux_libs" -eq 0 ]; then echo "Missing Linux libraries"; exit 1; fi
          if [ "$macos_libs" -eq 0 ]; then echo "Missing macOS libraries"; exit 1; fi
          if [ "$windows_libs" -eq 0 ]; then echo "Missing Windows libraries"; exit 1; fi

          echo "✓ Found $linux_libs Linux, $macos_libs macOS, $windows_libs Windows libraries"

      - name: Install build dependencies
        run: python -m pip install --upgrade pip build

      - name: Build distributions
        run: python -m build

      - name: Verify distributions
        run: |
          echo "Built distributions:"
          ls -la dist/
          echo "\nWheel contents:"
          python -m zipfile -l dist/*.whl | head -20
          echo "\nSDist contents:"
          tar -tzf dist/*.tar.gz | head -20

      - name: Deploy to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TESTPYPI_SECRET }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

      - name: Test TestPyPI installation
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Testing version: $VERSION"

          # Install from TestPyPI
          python -m pip install --index-url https://test.pypi.org/simple/ \
                                --extra-index-url https://pypi.org/simple \
                                "btrack==$VERSION"

          # Test basic functionality
          python -c "
          import btrack
          print(f'✓ Imported btrack {btrack.__version__}')
          tracker = btrack.BayesianTracker()
          print('✓ Created BayesianTracker instance')
          print('✓ TestPyPI deployment verified')
          "

      - name: Deploy to PyPI
        if: github.repository == 'quantumjot/btrack'
        uses: pypa/gh-action-pypi-publish@release/v1
        # Uses trusted publishing - no password needed
